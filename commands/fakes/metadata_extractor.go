// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/pivotal-cf/om/extractor"
)

type MetadataExtractor struct {
	ExtractFromFileStub        func(string) (extractor.Metadata, error)
	extractFromFileMutex       sync.RWMutex
	extractFromFileArgsForCall []struct {
		arg1 string
	}
	extractFromFileReturns struct {
		result1 extractor.Metadata
		result2 error
	}
	extractFromFileReturnsOnCall map[int]struct {
		result1 extractor.Metadata
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *MetadataExtractor) ExtractFromFile(arg1 string) (extractor.Metadata, error) {
	fake.extractFromFileMutex.Lock()
	ret, specificReturn := fake.extractFromFileReturnsOnCall[len(fake.extractFromFileArgsForCall)]
	fake.extractFromFileArgsForCall = append(fake.extractFromFileArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ExtractFromFile", []interface{}{arg1})
	fake.extractFromFileMutex.Unlock()
	if fake.ExtractFromFileStub != nil {
		return fake.ExtractFromFileStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.extractFromFileReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *MetadataExtractor) ExtractFromFileCallCount() int {
	fake.extractFromFileMutex.RLock()
	defer fake.extractFromFileMutex.RUnlock()
	return len(fake.extractFromFileArgsForCall)
}

func (fake *MetadataExtractor) ExtractFromFileCalls(stub func(string) (extractor.Metadata, error)) {
	fake.extractFromFileMutex.Lock()
	defer fake.extractFromFileMutex.Unlock()
	fake.ExtractFromFileStub = stub
}

func (fake *MetadataExtractor) ExtractFromFileArgsForCall(i int) string {
	fake.extractFromFileMutex.RLock()
	defer fake.extractFromFileMutex.RUnlock()
	argsForCall := fake.extractFromFileArgsForCall[i]
	return argsForCall.arg1
}

func (fake *MetadataExtractor) ExtractFromFileReturns(result1 extractor.Metadata, result2 error) {
	fake.extractFromFileMutex.Lock()
	defer fake.extractFromFileMutex.Unlock()
	fake.ExtractFromFileStub = nil
	fake.extractFromFileReturns = struct {
		result1 extractor.Metadata
		result2 error
	}{result1, result2}
}

func (fake *MetadataExtractor) ExtractFromFileReturnsOnCall(i int, result1 extractor.Metadata, result2 error) {
	fake.extractFromFileMutex.Lock()
	defer fake.extractFromFileMutex.Unlock()
	fake.ExtractFromFileStub = nil
	if fake.extractFromFileReturnsOnCall == nil {
		fake.extractFromFileReturnsOnCall = make(map[int]struct {
			result1 extractor.Metadata
			result2 error
		})
	}
	fake.extractFromFileReturnsOnCall[i] = struct {
		result1 extractor.Metadata
		result2 error
	}{result1, result2}
}

func (fake *MetadataExtractor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.extractFromFileMutex.RLock()
	defer fake.extractFromFileMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *MetadataExtractor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
