// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"
)

type ProductVersioner struct {
	GetAllProductVersionsStub        func(string) ([]string, error)
	getAllProductVersionsMutex       sync.RWMutex
	getAllProductVersionsArgsForCall []struct {
		arg1 string
	}
	getAllProductVersionsReturns struct {
		result1 []string
		result2 error
	}
	getAllProductVersionsReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ProductVersioner) GetAllProductVersions(arg1 string) ([]string, error) {
	fake.getAllProductVersionsMutex.Lock()
	ret, specificReturn := fake.getAllProductVersionsReturnsOnCall[len(fake.getAllProductVersionsArgsForCall)]
	fake.getAllProductVersionsArgsForCall = append(fake.getAllProductVersionsArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetAllProductVersions", []interface{}{arg1})
	fake.getAllProductVersionsMutex.Unlock()
	if fake.GetAllProductVersionsStub != nil {
		return fake.GetAllProductVersionsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getAllProductVersionsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ProductVersioner) GetAllProductVersionsCallCount() int {
	fake.getAllProductVersionsMutex.RLock()
	defer fake.getAllProductVersionsMutex.RUnlock()
	return len(fake.getAllProductVersionsArgsForCall)
}

func (fake *ProductVersioner) GetAllProductVersionsCalls(stub func(string) ([]string, error)) {
	fake.getAllProductVersionsMutex.Lock()
	defer fake.getAllProductVersionsMutex.Unlock()
	fake.GetAllProductVersionsStub = stub
}

func (fake *ProductVersioner) GetAllProductVersionsArgsForCall(i int) string {
	fake.getAllProductVersionsMutex.RLock()
	defer fake.getAllProductVersionsMutex.RUnlock()
	argsForCall := fake.getAllProductVersionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ProductVersioner) GetAllProductVersionsReturns(result1 []string, result2 error) {
	fake.getAllProductVersionsMutex.Lock()
	defer fake.getAllProductVersionsMutex.Unlock()
	fake.GetAllProductVersionsStub = nil
	fake.getAllProductVersionsReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *ProductVersioner) GetAllProductVersionsReturnsOnCall(i int, result1 []string, result2 error) {
	fake.getAllProductVersionsMutex.Lock()
	defer fake.getAllProductVersionsMutex.Unlock()
	fake.GetAllProductVersionsStub = nil
	if fake.getAllProductVersionsReturnsOnCall == nil {
		fake.getAllProductVersionsReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.getAllProductVersionsReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *ProductVersioner) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getAllProductVersionsMutex.RLock()
	defer fake.getAllProductVersionsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ProductVersioner) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
