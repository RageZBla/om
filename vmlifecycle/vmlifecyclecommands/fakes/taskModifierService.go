// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"io"
	"sync"
)

type TaskModifierService struct {
	ModifyTasksWithSecretsStub        func(io.Writer, string, []string, []string) error
	modifyTasksWithSecretsMutex       sync.RWMutex
	modifyTasksWithSecretsArgsForCall []struct {
		arg1 io.Writer
		arg2 string
		arg3 []string
		arg4 []string
	}
	modifyTasksWithSecretsReturns struct {
		result1 error
	}
	modifyTasksWithSecretsReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *TaskModifierService) ModifyTasksWithSecrets(arg1 io.Writer, arg2 string, arg3 []string, arg4 []string) error {
	var arg3Copy []string
	if arg3 != nil {
		arg3Copy = make([]string, len(arg3))
		copy(arg3Copy, arg3)
	}
	var arg4Copy []string
	if arg4 != nil {
		arg4Copy = make([]string, len(arg4))
		copy(arg4Copy, arg4)
	}
	fake.modifyTasksWithSecretsMutex.Lock()
	ret, specificReturn := fake.modifyTasksWithSecretsReturnsOnCall[len(fake.modifyTasksWithSecretsArgsForCall)]
	fake.modifyTasksWithSecretsArgsForCall = append(fake.modifyTasksWithSecretsArgsForCall, struct {
		arg1 io.Writer
		arg2 string
		arg3 []string
		arg4 []string
	}{arg1, arg2, arg3Copy, arg4Copy})
	fake.recordInvocation("ModifyTasksWithSecrets", []interface{}{arg1, arg2, arg3Copy, arg4Copy})
	fake.modifyTasksWithSecretsMutex.Unlock()
	if fake.ModifyTasksWithSecretsStub != nil {
		return fake.ModifyTasksWithSecretsStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.modifyTasksWithSecretsReturns
	return fakeReturns.result1
}

func (fake *TaskModifierService) ModifyTasksWithSecretsCallCount() int {
	fake.modifyTasksWithSecretsMutex.RLock()
	defer fake.modifyTasksWithSecretsMutex.RUnlock()
	return len(fake.modifyTasksWithSecretsArgsForCall)
}

func (fake *TaskModifierService) ModifyTasksWithSecretsCalls(stub func(io.Writer, string, []string, []string) error) {
	fake.modifyTasksWithSecretsMutex.Lock()
	defer fake.modifyTasksWithSecretsMutex.Unlock()
	fake.ModifyTasksWithSecretsStub = stub
}

func (fake *TaskModifierService) ModifyTasksWithSecretsArgsForCall(i int) (io.Writer, string, []string, []string) {
	fake.modifyTasksWithSecretsMutex.RLock()
	defer fake.modifyTasksWithSecretsMutex.RUnlock()
	argsForCall := fake.modifyTasksWithSecretsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *TaskModifierService) ModifyTasksWithSecretsReturns(result1 error) {
	fake.modifyTasksWithSecretsMutex.Lock()
	defer fake.modifyTasksWithSecretsMutex.Unlock()
	fake.ModifyTasksWithSecretsStub = nil
	fake.modifyTasksWithSecretsReturns = struct {
		result1 error
	}{result1}
}

func (fake *TaskModifierService) ModifyTasksWithSecretsReturnsOnCall(i int, result1 error) {
	fake.modifyTasksWithSecretsMutex.Lock()
	defer fake.modifyTasksWithSecretsMutex.Unlock()
	fake.ModifyTasksWithSecretsStub = nil
	if fake.modifyTasksWithSecretsReturnsOnCall == nil {
		fake.modifyTasksWithSecretsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.modifyTasksWithSecretsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *TaskModifierService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.modifyTasksWithSecretsMutex.RLock()
	defer fake.modifyTasksWithSecretsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *TaskModifierService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
