// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/pivotal-cf/om/vmlifecycle/configfetchers"
	"github.com/pivotal-cf/om/vmlifecycle/vmmanagers"
)

type OpsmanConfigFetcherService struct {
	FetchConfigStub        func() (*vmmanagers.OpsmanConfigFilePayload, error)
	fetchConfigMutex       sync.RWMutex
	fetchConfigArgsForCall []struct {
	}
	fetchConfigReturns struct {
		result1 *vmmanagers.OpsmanConfigFilePayload
		result2 error
	}
	fetchConfigReturnsOnCall map[int]struct {
		result1 *vmmanagers.OpsmanConfigFilePayload
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *OpsmanConfigFetcherService) FetchConfig() (*vmmanagers.OpsmanConfigFilePayload, error) {
	fake.fetchConfigMutex.Lock()
	ret, specificReturn := fake.fetchConfigReturnsOnCall[len(fake.fetchConfigArgsForCall)]
	fake.fetchConfigArgsForCall = append(fake.fetchConfigArgsForCall, struct {
	}{})
	fake.recordInvocation("FetchConfig", []interface{}{})
	fake.fetchConfigMutex.Unlock()
	if fake.FetchConfigStub != nil {
		return fake.FetchConfigStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.fetchConfigReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *OpsmanConfigFetcherService) FetchConfigCallCount() int {
	fake.fetchConfigMutex.RLock()
	defer fake.fetchConfigMutex.RUnlock()
	return len(fake.fetchConfigArgsForCall)
}

func (fake *OpsmanConfigFetcherService) FetchConfigCalls(stub func() (*vmmanagers.OpsmanConfigFilePayload, error)) {
	fake.fetchConfigMutex.Lock()
	defer fake.fetchConfigMutex.Unlock()
	fake.FetchConfigStub = stub
}

func (fake *OpsmanConfigFetcherService) FetchConfigReturns(result1 *vmmanagers.OpsmanConfigFilePayload, result2 error) {
	fake.fetchConfigMutex.Lock()
	defer fake.fetchConfigMutex.Unlock()
	fake.FetchConfigStub = nil
	fake.fetchConfigReturns = struct {
		result1 *vmmanagers.OpsmanConfigFilePayload
		result2 error
	}{result1, result2}
}

func (fake *OpsmanConfigFetcherService) FetchConfigReturnsOnCall(i int, result1 *vmmanagers.OpsmanConfigFilePayload, result2 error) {
	fake.fetchConfigMutex.Lock()
	defer fake.fetchConfigMutex.Unlock()
	fake.FetchConfigStub = nil
	if fake.fetchConfigReturnsOnCall == nil {
		fake.fetchConfigReturnsOnCall = make(map[int]struct {
			result1 *vmmanagers.OpsmanConfigFilePayload
			result2 error
		})
	}
	fake.fetchConfigReturnsOnCall[i] = struct {
		result1 *vmmanagers.OpsmanConfigFilePayload
		result2 error
	}{result1, result2}
}

func (fake *OpsmanConfigFetcherService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fetchConfigMutex.RLock()
	defer fake.fetchConfigMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *OpsmanConfigFetcherService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ configfetchers.OpsmanConfigFetcherService = new(OpsmanConfigFetcherService)
