// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/aws/aws-sdk-go/service/ec2"
	"github.com/pivotal-cf/om/vmlifecycle/configfetchers"
)

type Ec2Client struct {
	DescribeInstancesStub        func(*ec2.DescribeInstancesInput) (*ec2.DescribeInstancesOutput, error)
	describeInstancesMutex       sync.RWMutex
	describeInstancesArgsForCall []struct {
		arg1 *ec2.DescribeInstancesInput
	}
	describeInstancesReturns struct {
		result1 *ec2.DescribeInstancesOutput
		result2 error
	}
	describeInstancesReturnsOnCall map[int]struct {
		result1 *ec2.DescribeInstancesOutput
		result2 error
	}
	DescribeVolumesStub        func(*ec2.DescribeVolumesInput) (*ec2.DescribeVolumesOutput, error)
	describeVolumesMutex       sync.RWMutex
	describeVolumesArgsForCall []struct {
		arg1 *ec2.DescribeVolumesInput
	}
	describeVolumesReturns struct {
		result1 *ec2.DescribeVolumesOutput
		result2 error
	}
	describeVolumesReturnsOnCall map[int]struct {
		result1 *ec2.DescribeVolumesOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Ec2Client) DescribeInstances(arg1 *ec2.DescribeInstancesInput) (*ec2.DescribeInstancesOutput, error) {
	fake.describeInstancesMutex.Lock()
	ret, specificReturn := fake.describeInstancesReturnsOnCall[len(fake.describeInstancesArgsForCall)]
	fake.describeInstancesArgsForCall = append(fake.describeInstancesArgsForCall, struct {
		arg1 *ec2.DescribeInstancesInput
	}{arg1})
	fake.recordInvocation("DescribeInstances", []interface{}{arg1})
	fake.describeInstancesMutex.Unlock()
	if fake.DescribeInstancesStub != nil {
		return fake.DescribeInstancesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeInstancesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Ec2Client) DescribeInstancesCallCount() int {
	fake.describeInstancesMutex.RLock()
	defer fake.describeInstancesMutex.RUnlock()
	return len(fake.describeInstancesArgsForCall)
}

func (fake *Ec2Client) DescribeInstancesCalls(stub func(*ec2.DescribeInstancesInput) (*ec2.DescribeInstancesOutput, error)) {
	fake.describeInstancesMutex.Lock()
	defer fake.describeInstancesMutex.Unlock()
	fake.DescribeInstancesStub = stub
}

func (fake *Ec2Client) DescribeInstancesArgsForCall(i int) *ec2.DescribeInstancesInput {
	fake.describeInstancesMutex.RLock()
	defer fake.describeInstancesMutex.RUnlock()
	argsForCall := fake.describeInstancesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Ec2Client) DescribeInstancesReturns(result1 *ec2.DescribeInstancesOutput, result2 error) {
	fake.describeInstancesMutex.Lock()
	defer fake.describeInstancesMutex.Unlock()
	fake.DescribeInstancesStub = nil
	fake.describeInstancesReturns = struct {
		result1 *ec2.DescribeInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *Ec2Client) DescribeInstancesReturnsOnCall(i int, result1 *ec2.DescribeInstancesOutput, result2 error) {
	fake.describeInstancesMutex.Lock()
	defer fake.describeInstancesMutex.Unlock()
	fake.DescribeInstancesStub = nil
	if fake.describeInstancesReturnsOnCall == nil {
		fake.describeInstancesReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeInstancesOutput
			result2 error
		})
	}
	fake.describeInstancesReturnsOnCall[i] = struct {
		result1 *ec2.DescribeInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *Ec2Client) DescribeVolumes(arg1 *ec2.DescribeVolumesInput) (*ec2.DescribeVolumesOutput, error) {
	fake.describeVolumesMutex.Lock()
	ret, specificReturn := fake.describeVolumesReturnsOnCall[len(fake.describeVolumesArgsForCall)]
	fake.describeVolumesArgsForCall = append(fake.describeVolumesArgsForCall, struct {
		arg1 *ec2.DescribeVolumesInput
	}{arg1})
	fake.recordInvocation("DescribeVolumes", []interface{}{arg1})
	fake.describeVolumesMutex.Unlock()
	if fake.DescribeVolumesStub != nil {
		return fake.DescribeVolumesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeVolumesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Ec2Client) DescribeVolumesCallCount() int {
	fake.describeVolumesMutex.RLock()
	defer fake.describeVolumesMutex.RUnlock()
	return len(fake.describeVolumesArgsForCall)
}

func (fake *Ec2Client) DescribeVolumesCalls(stub func(*ec2.DescribeVolumesInput) (*ec2.DescribeVolumesOutput, error)) {
	fake.describeVolumesMutex.Lock()
	defer fake.describeVolumesMutex.Unlock()
	fake.DescribeVolumesStub = stub
}

func (fake *Ec2Client) DescribeVolumesArgsForCall(i int) *ec2.DescribeVolumesInput {
	fake.describeVolumesMutex.RLock()
	defer fake.describeVolumesMutex.RUnlock()
	argsForCall := fake.describeVolumesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Ec2Client) DescribeVolumesReturns(result1 *ec2.DescribeVolumesOutput, result2 error) {
	fake.describeVolumesMutex.Lock()
	defer fake.describeVolumesMutex.Unlock()
	fake.DescribeVolumesStub = nil
	fake.describeVolumesReturns = struct {
		result1 *ec2.DescribeVolumesOutput
		result2 error
	}{result1, result2}
}

func (fake *Ec2Client) DescribeVolumesReturnsOnCall(i int, result1 *ec2.DescribeVolumesOutput, result2 error) {
	fake.describeVolumesMutex.Lock()
	defer fake.describeVolumesMutex.Unlock()
	fake.DescribeVolumesStub = nil
	if fake.describeVolumesReturnsOnCall == nil {
		fake.describeVolumesReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeVolumesOutput
			result2 error
		})
	}
	fake.describeVolumesReturnsOnCall[i] = struct {
		result1 *ec2.DescribeVolumesOutput
		result2 error
	}{result1, result2}
}

func (fake *Ec2Client) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.describeInstancesMutex.RLock()
	defer fake.describeInstancesMutex.RUnlock()
	fake.describeVolumesMutex.RLock()
	defer fake.describeVolumesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Ec2Client) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ configfetchers.Ec2Client = new(Ec2Client)
