// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/pivotal-cf/om/vmlifecycle/vmmanagers"
)

type DeleteVMService struct {
	DeleteVMStub        func() error
	deleteVMMutex       sync.RWMutex
	deleteVMArgsForCall []struct {
	}
	deleteVMReturns struct {
		result1 error
	}
	deleteVMReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *DeleteVMService) DeleteVM() error {
	fake.deleteVMMutex.Lock()
	ret, specificReturn := fake.deleteVMReturnsOnCall[len(fake.deleteVMArgsForCall)]
	fake.deleteVMArgsForCall = append(fake.deleteVMArgsForCall, struct {
	}{})
	fake.recordInvocation("DeleteVM", []interface{}{})
	fake.deleteVMMutex.Unlock()
	if fake.DeleteVMStub != nil {
		return fake.DeleteVMStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteVMReturns
	return fakeReturns.result1
}

func (fake *DeleteVMService) DeleteVMCallCount() int {
	fake.deleteVMMutex.RLock()
	defer fake.deleteVMMutex.RUnlock()
	return len(fake.deleteVMArgsForCall)
}

func (fake *DeleteVMService) DeleteVMCalls(stub func() error) {
	fake.deleteVMMutex.Lock()
	defer fake.deleteVMMutex.Unlock()
	fake.DeleteVMStub = stub
}

func (fake *DeleteVMService) DeleteVMReturns(result1 error) {
	fake.deleteVMMutex.Lock()
	defer fake.deleteVMMutex.Unlock()
	fake.DeleteVMStub = nil
	fake.deleteVMReturns = struct {
		result1 error
	}{result1}
}

func (fake *DeleteVMService) DeleteVMReturnsOnCall(i int, result1 error) {
	fake.deleteVMMutex.Lock()
	defer fake.deleteVMMutex.Unlock()
	fake.DeleteVMStub = nil
	if fake.deleteVMReturnsOnCall == nil {
		fake.deleteVMReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteVMReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *DeleteVMService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteVMMutex.RLock()
	defer fake.deleteVMMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *DeleteVMService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ vmmanagers.DeleteVMService = new(DeleteVMService)
