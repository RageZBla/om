// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/pivotal-cf/om/vmlifecycle/vmmanagers"
)

type CreateVMService struct {
	CreateVMStub        func() (vmmanagers.Status, vmmanagers.StateInfo, error)
	createVMMutex       sync.RWMutex
	createVMArgsForCall []struct {
	}
	createVMReturns struct {
		result1 vmmanagers.Status
		result2 vmmanagers.StateInfo
		result3 error
	}
	createVMReturnsOnCall map[int]struct {
		result1 vmmanagers.Status
		result2 vmmanagers.StateInfo
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *CreateVMService) CreateVM() (vmmanagers.Status, vmmanagers.StateInfo, error) {
	fake.createVMMutex.Lock()
	ret, specificReturn := fake.createVMReturnsOnCall[len(fake.createVMArgsForCall)]
	fake.createVMArgsForCall = append(fake.createVMArgsForCall, struct {
	}{})
	fake.recordInvocation("CreateVM", []interface{}{})
	fake.createVMMutex.Unlock()
	if fake.CreateVMStub != nil {
		return fake.CreateVMStub()
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.createVMReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *CreateVMService) CreateVMCallCount() int {
	fake.createVMMutex.RLock()
	defer fake.createVMMutex.RUnlock()
	return len(fake.createVMArgsForCall)
}

func (fake *CreateVMService) CreateVMCalls(stub func() (vmmanagers.Status, vmmanagers.StateInfo, error)) {
	fake.createVMMutex.Lock()
	defer fake.createVMMutex.Unlock()
	fake.CreateVMStub = stub
}

func (fake *CreateVMService) CreateVMReturns(result1 vmmanagers.Status, result2 vmmanagers.StateInfo, result3 error) {
	fake.createVMMutex.Lock()
	defer fake.createVMMutex.Unlock()
	fake.CreateVMStub = nil
	fake.createVMReturns = struct {
		result1 vmmanagers.Status
		result2 vmmanagers.StateInfo
		result3 error
	}{result1, result2, result3}
}

func (fake *CreateVMService) CreateVMReturnsOnCall(i int, result1 vmmanagers.Status, result2 vmmanagers.StateInfo, result3 error) {
	fake.createVMMutex.Lock()
	defer fake.createVMMutex.Unlock()
	fake.CreateVMStub = nil
	if fake.createVMReturnsOnCall == nil {
		fake.createVMReturnsOnCall = make(map[int]struct {
			result1 vmmanagers.Status
			result2 vmmanagers.StateInfo
			result3 error
		})
	}
	fake.createVMReturnsOnCall[i] = struct {
		result1 vmmanagers.Status
		result2 vmmanagers.StateInfo
		result3 error
	}{result1, result2, result3}
}

func (fake *CreateVMService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createVMMutex.RLock()
	defer fake.createVMMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *CreateVMService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ vmmanagers.CreateVMService = new(CreateVMService)
